INDEXES

- are special data structure that store small portion of data that are ordeded and are easily  to search efficiently
- they point to the docement identity

::NB
 - they are used to improve query
 - speed up the queries
 - reduce the disk i/o
 - reduce the resources required
 - support query such as equility matches range based operation and returned sorted results.

 without INDEXES
 mongoDB has to read all the documents via collection scan
 sort the results in the query

 -- The default indexes in mongoDB is _id field

 -- COMMON TYPES OF INDEXES IN mongoDB --
 - single indexes - this are indexes in one field only
 - compound indexes - include more than one field in the indexes

 ::NB - indexes that operate in an array are called multikey indexes

 -- SINGLE FIELD INDEXES --
 - creating single field index using createIndex()
 - enforce uniqueness
 - identity indexes using the getIndexes()
 - determining the indexes being used in the query by using the explain()

 -- createIndex()
 - Use createIndex() to create a new index in a collection. Within the parentheses of createIndex(), include an object that contains the field and sort order.

 example
   db.customers.createIndex({
  birthdate: 1
})

Add {unique:true} as a second, optional, parameter in createIndex() to force uniqueness in the index field values. Once the unique index is created, any inserts or updates including duplicated values in the collection for the index field/s will fail.

 example
- db.customers.createIndex({
  email: 1
},
{
  unique:true
})

-- getIndexes() --
- Use getIndexes() to see all the indexes created in a collection.
- db.customers.getIndexes()

-- MULTIKEYS INDEXES --
- index on an array field
- it can be single field index or compound index

-- multikeys indexing --
- an index where one of the indexed field contains an array
- the array can hold nested object or other field
- in compound index only one field can be and array per index

Check if an index is being used on a query
Use explain() in a collection when running a query to see the Execution plan. This plan provides the details of the execution stages (IXSCAN , COLLSCAN, FETCH, SORT, etc.). Some of these are:

The IXSCAN stage indicates the query is using an index and what index is being selected.
The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
The FETCH stage indicates documents are being read from the collection.
The SORT stage indicates documents are being sorted in memory.

-- DELETING AN INDEXES --
- disadv of indexes is that they also have write cost
- too many indexes in a collection can cause system perfomance.
-- NB:: we should delete an used or reduntant indexes
-- deleting an index that is being in used will affect an index perfomance
- hide an index before deleting it

example hiding an index
db.collection.hideIndex({
    name: 1,
    birthdate: -1,
    active: 1
})

then after hiding an index we will dropIndex()

db.collection.dropIndex({index})
::NB dropIndexes() - can be used to delete many indexes

-- ACID IN mongoDB IN TRANSANCTIONS --
-system that move funds - such as mobile payments
- system that track inventory - such as online shopping
- system that track payments - biling software.

- ACID Transaction - are group of database operations that will be completed as a unit or not at all.
- ACID - ATOMICITY - CONSISTENCY - ISOLATION - DURABILITY
- ATOMICITY - all operation will either succeed or fail together.
- CONSISTENCY - means all changes made by the operation need to be consistence with the database contraints.
- ISOLATION - multiple transaction can happen in the same time without affecting the transaction of other TRANSANCTIONS
- DURABILITY - all changes made by the operation will persist no matter what.

-- SINGLE AND MULTI ACID transactions in mongoDB --
- single-documents operation are already atomic in mongoDB
- multi documents operation are not inherently atomic
  - mongoDB locs  resources involved in transactions
  - incur perfomance cost and affect latency

  -- SESSION --
  - Are group of database operation that should run together and related to one another
  ACID transactions in MongoDB are typically used only by applications where values are exchanged between different parties, such as banking or business applications. If you find yourself in a scenario where a multi-document transaction is required, it's very likely that you will complete a transaction with one of MongoDB's drivers. For now, let's focus on completing and canceling multi-document transactions in the shell to become familiar with the steps.

  use of transaction
  const session = db.getMongo().startSession()

session.startTransaction()

const account = session.getDatabase('< add database name here>').getCollection('<add collection name here>')

//Add database operations like .updateOne() here

session.commitTransaction()


Aborting a Transaction
If you find yourself in a scenario that requires you to roll back database operations before a transaction is completed, you can abort the transaction. Doing so will roll back the database to its original state, before the transaction was initiated.

example
const session = db.getMongo().startSession()

session.startTransaction()

const account = session.getDatabase('< add database name here>').getCollection('<add collection name here>')

//Add database operations like .updateOne() here

session.abortTransaction()