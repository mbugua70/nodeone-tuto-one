-- INSERTING DOCUMENTS IN MONGODB COLLECTIONS --
METHOD USED

-- insertOne() - used to insert one document to the database
-- insertMany() - used to insert many into the document/ expect an array of DOCUMENTS


-- FINDING DOCUMENTS IN IN MONGODB COLLECTIONS --
-- find() - used to retrieve data from the database
-- $in - operator used to find / select all document that have field value equal to any of the values specified value.

-- $eq - find a document with field and value

--  COMPARISON OPERATORS --

-- $gt - greater than - returns document where field is greater than the value specified
-- $lt - less than - returns document where field is less than the value specified
-- $gte - greater than or equal to  - return document with field greater than or equal to specified value
-- $lte - less than or equal to - return document with field less than or equal to specified value

   syntax ---
      - <field> :{<operator> : <value>}

      -- QUERY ARRAY IN DOCUMENTS --
    -- $elemMath - finding doc in an array that match certain critea

    -- LOGICAL OPERATORS --
    $and -- syntax db.collection.find({<expression>,  <expression>})
         -- syntax 2 db.collection.find({
            $and: [{<expression>}, {<expression>}]
         })

    $or -

    NOTE::
      -- when including the same operator more than once in your query you need to use the explicit and operator

      -- REPLACING, UPDATING, AND DELETING DOCUMENTS --
       -- replaceOne() - this one its a method used to replace a single doc
       -- it accepts three arquements
       -- replaceOne(filter, replacement, options)


      -- matchedCount - this one shows the number of doc that matched our filter
      -- modifiedCount - refers to number of doc that was modified

      example

          db.books.replaceOne(
  {
    _id: ObjectId("6282afeb441a74a98dbbec4e"),
  },
  {
    title: "Data Science Fundamentals for Python and MongoDB",
    isbn: "1484235967",
    publishedDate: new Date("2018-5-10"),
    thumbnailUrl:
      "https://m.media-amazon.com/images/I/71opmUBc2wL._AC_UY218_.jpg",
    authors: ["David Paper"],
    categories: ["Data Science"],
  }
)


-- updateOne() --
-- this one its a method used to udate the doc
-- its used together with $set and $push operator
-- its update a single doc

 -- syntax --
     -- db.collections.updateOne({
      <filter>, - contains sections material for the update, this could be unique _id.
      <update>, - contains an update operator expressions that will be used.
      <option>
     })

     -- $set - add new field or value to the document.
     -- replaced the specified value with the new value

     $push - append the value to an array
           - if absent $push will add the array field with value and its element


 upsert -- used to insert a document with provided information if matching of the doc does not exist


-- findAndModify() --
-- used to return the document that has just been updated.
-- this method accept doc as an arguement with several embeded doc field

syntax ---
    db.collections.findAndModify({
      query: <Object id>,
      update: {$inc: {downloads: 1}},
      new: true
    })


-- updateMany() --
-- used to update many document in a collection
-- accept the following arguement
    -- filter doc - selection criteria
    -- update doc
    -- option object


 --- when to use it
   - not an all or nothing operation - if some of the update fails you will have to run the updateMany() again


   -- limit, sorting, and projection --
   methods used are:
      -- sort()
      -- limit()
      -- cursor - is a pointer to the result set of a query
      find() will return a cursor

      example
         db.collection.find({category_code: "music"}).sort({name: 1})
         capital letter will sorted first then followed by small letter

         -- using projection
         db.collection.find({category_code: "music", name: 1}).sort({name: 1})

         example:::
          -- limit(3) -- this will limit the doc into only three document

          -- projection --
          -- help to only return only the numbers of field we need from the MongoDB database.

          example ---
          db.collection.find({sector: "restaurant - 818"}, {business_name: 1, result: 1, id: 0})

          - The above code will give us the result for restaurant, and only the business_name field result and will exclude the id.

          NB::: TO INCLUDE FIELDS
          - we set the values to 1

                TO EXCLUDE FIELDS
          - we set the values to 0


          -- COUNT DOCUMENTS --
          -- db.collection.countDocuments()
          -- takes the two arguement <query> and the <options>
